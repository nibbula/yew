;;;
;;; unipose.lisp - Compose unicode characters
;;;

(defpackage :unipose
  (:documentation "Compose unicode characters.")
  (:use :cl :dlib)
  (:export
   #:unipose
   #:set-unipose
   #:save-unipose-for-emacs
   ))
(in-package :unipose)

;; I know this is a strange madness that most people won't want.
;; - It should really be made customizable.
;; - It should load *unipose* from $HOME/.unipose or something.
;; - It should have an "add your own" function.
;; - It should have a "save it" function.
;; - It should have a set which is RFC 1345
;; - It should handle arbitrary length / levels

(eval-when (:compile-toplevel :load-toplevel :execute)
  (locally #+sbcl (declare (sb-ext:muffle-conditions sb-ext:compiler-note))
    (cond
      ((<= char-code-limit #xff)
       (warn "Unipose isn't going to work for 8 bit characters.")
       (d-add-feature :t-8))
      ((<= char-code-limit #x10000)
       (warn "Some unipose sequences won't work with 16 bit characters.")
       (d-add-feature :t-16))
      ((< char-code-limit #x110000)
       (warn "You might be missing some characters.")
       (d-add-feature :t-shrunk)))))

;; trouble makers:
;; #x1F18E üÜé #x1F191 üÜë #x1F194 üÜî #x1F21A üàö #x1F196 üÜñ #x1F197 üÜó #x1F19A üÜö

;; Slow scrollin' pardner.
(defparameter *unipose*
  #-t-8
  '((#\0 ((#\^ #\‚Å∞)))
    (#\1 ((#\2 #\¬Ω) (#\4 #\¬º) (#\^ #\¬π)))
    (#\2 ((#\^ #\¬≤)))
    (#\3 ((#\^ #\¬≥) (#\4 #\¬æ)))
    (#\4 ((#\^ #\‚Å¥)))
    (#\5 ((#\^ #\‚Åµ)))
    (#\6 ((#\^ #\‚Å∂)))
    (#\7 ((#\^ #\‚Å∑)))
    (#\8 ((#\8 #\‚àû) (#\^ #\‚Å∏)))
    (#\9 ((#\^ #\‚Åπ)))
    (#\A ((#\^ #\√Ç) (#\' #\√Å) (#\` #\√Ä) (#\" #\√Ñ) (#\E #\√Ü) (#\o #\√Ö) (#\~ #\√É)
	  #-t-16 (#\B #\üÜé)
	  ))
    (#\a ((#\^ #\√¢) (#\' #\√°) (#\` #\√†) (#\" #\√§) (#\e #\√¶) (#\o #\√•) (#\~ #\√£)
	  (#\_ #\¬™) (#\p #\Ô£ø)))
    (#\B ((#\B #\√ü)))
    (#\c (((#\0 #\O) #\¬©) ((#\/ #\|) #\¬¢) (#\, #\√ß) (#\* #\‚ò™) (#\C #\Ôø†)))
    (#\C (((#\0 #\O) #\¬©) ((#\/ #\|) #\Ôø†) (#\, #\√á) (#\* #\‚ò™)
	  #-t-16 (#\L #\üÜë)))
    (#\D ((#\D #\‚àÜ) (#\- #\√ê)))
    (#\d ((#\g #\Àö)))
    (#\E ((#\^ #\√ä) (#\' #\√â) (#\` #\√à) (#\" #\√ã) ((#\~ #\- #\=) #\‚Ç¨)))
    (#\f ((#\~ #\∆í) (#\f #\Ô¨Ä) (#\i #\Ô¨Å) (#\l #\Ô¨Ç) (#\t #\Ô¨Ö))) ; what about Ô¨É Ô¨Ñ
    (#\e ((#\^ #\√™) (#\' #\√©) (#\` #\√®) (#\" #\√´) ((#\~ #\- #\=) #\‚Ç¨)))
    (#\I ((#\^ #\√é) (#\' #\√ç) (#\` #\√å) (#\" #\√è) #-t-16 (#\D #\üÜî)))
    (#\i ((#\^ #\√Æ) (#\' #\√≠) (#\` #\√¨) (#\" #\√Ø) (#\j #\ƒ≥)))
    (#\L ((#\L #\Œõ) (#\- #\¬£)))
    (#\l ((#\l #\Œª)))
    (#\M #-t-16 ((#\U #\üàö)))
    (#\m ((#\u #\¬µ)))
    (#\N ((#\~ #\√ë) #-t-16 (#\G #\üÜñ)))
    (#\n ((#\~ #\√±) (#\^ #\‚Åø)))
    (#\O ((#\^ #\√î) (#\' #\√ì) (#\` #\√í) (#\" #\√ñ) (#\E #\≈í) (#\~ #\√ï) (#\O #\Œ©)
	  #-t-16 (#\K #\üÜó)))
    (#\o ((#\^ #\√¥) (#\' #\√≥) (#\` #\√≤) (#\" #\√∂) (#\e #\≈ì) (#\~ #\√µ) (#\_ #\¬∫)))
    (#\P ((#\H #\Œ¶) (#\I #\Œ†) (#\P #\¬∂)))
    (#\p ((#\h #\œÜ) (#\i #\œÄ)))
    (#\r (((#\0 #\O #\o) #\¬Æ)))
    (#\S ((#\S #\‚àë)))
    (#\s ((#\e #\¬ß) (#\r #\‚àö) (#\s #\√ü) (#\t #\Ô¨Ü)))
    (#\T (((#\M #\m) #\‚Ñ¢) (#\T #\√û)))
    (#\t (((#\M #\m) #\‚Ñ¢) (#\T #\√æ)))
    (#\U ((#\^ #\√õ) (#\' #\√ö) (#\` #\√ô) (#\" #\√ú)))
    (#\u ((#\^ #\√ª) (#\' #\√∫) (#\` #\√π) (#\" #\√º)))
    (#\V #-t-16 ((#\S #\üÜö)))
    (#\x ((#\x #\√ó) (#\* #\‚Äª)))
    (#\Y ((#\- #\¬•) (#\' #\√ù)))
    (#\y ((#\- #\¬•) (#\' #\√Ω)))
    (#\^ (;; captial circumflex
	 (#\A #\√Ç) (#\C #\ƒà) (#\E #\√ä) (#\G #\ƒú) (#\H #\ƒ§) (#\I #\√é) (#\J #\ƒ¥)
	 (#\O #\√î) (#\S #\≈ú) (#\U #\√õ) (#\W #\≈¥) (#\Y #\≈∂)
	 ;; lower circumflex
	 (#\a #\√¢) (#\c #\ƒâ) (#\e #\√™) (#\g #\ƒù) (#\h #\ƒ•) (#\i #\√Æ) (#\j #\ƒµ)
	 (#\o #\√¥) (#\s #\≈ù) (#\u #\√ª) (#\w #\≈µ) (#\y #\≈∑)))
    (#\' (;; capital acute
	 (#\A #\√Å) (#\E #\√â) (#\I #\√ç) (#\O #\√ì) (#\U #\√ö) (#\W #\·∫Ç) (#\Y #\√ù)
	 ;; lower acute
	 (#\a #\√°) (#\e #\√©) (#\i #\√≠) (#\o #\√≥) (#\u #\√∫) (#\w #\·∫É) (#\y #\√Ω)
	 ;; misc acute
	 (#\' #\¬¥) (#\< #\‚Äò) (#\> #\‚Äô) (#\_ #\ÃÅ)))
    (#\` (;; capital grave
         (#\A #\√Ä) (#\E #\√à) (#\I #\√å) (#\O #\√í) (#\U #\√ô) (#\W #\·∫Ä) (#\Y #\·ª≤)
	 ;; lower greve
	 (#\a #\√†) (#\e #\√®) (#\i #\√¨) (#\o #\√≤) (#\u #\√π) (#\w #\·∫Å) (#\y #\·ª≥)
	 ;; misc grave
	 (#\_ #\ÃÄ)))
    (#\" (;; capital diaeresis
	  (#\A #\√Ñ) (#\E #\√ã) (#\I #\√è) (#\O #\√ñ) (#\U #\√ú) (#\W #\·∫Ñ) (#\Y #\≈∏)
	  ;; lower diaeresis
	  (#\a #\√§) (#\e #\√´) (#\i #\√Ø) (#\o #\√∂) (#\u #\√º) (#\w #\·∫Ö) (#\y #\√ø)
	  (#\v #\‚Äû) (#\< #\‚Äú) (#\> #\‚Äù) (#\s #\√ü)
	  ;; misc diaeresis
	  (#\_ #\Ãà)))
    (#\~ (;; upper twiddles
	 (#\A #\√É) (#\C #\√á) (#\D #\√ê) (#\G #\ƒû) (#\N #\√ë) (#\T #\√û) (#\U #\≈¨)
	 ;; lower twiddles
	 (#\a #\√£) (#\c #\√ß) (#\d #\√∞) (#\g #\ƒü) (#\n #\√±) (#\t #\√æ) (#\u #\≈≠)
	 ;; misc twiddles
	 (#\e #\‚Ç¨) (#\p #\¬∂) (#\s #\¬ß) (#\u #\¬µ) (#\x #\¬§) (#\? #\¬ø) (#\! #\¬°)
	 (#\$ #\¬£) (#\. #\¬∑) (#\< #\¬´) (#\> #\¬ª)))
    (#\! ((#\! #\‚Äº) (#\v #\¬°) (#\? #\‚Åâ) (#\/ #\‚ù¢)))
    (#\? ((#\v #\¬ø) (#\? #\‚Åá) (#\! #\‚Åà) ((#\| #\/) #\‚ÄΩ)))
    (#\/ ((#\O #\√ò) (#\o #\√∏) (#\c #\¬¢) (#\= #\‚â†)))
    (#\| ((#\| #\¬¶)))
    (#\+ ((#\- #\¬±) (#\+ #\‚Ä†) (#\^ #\‚Å∫)))
    (#\- ((#\+ #\¬±) (#\: #\√∑) (#\> #\‚Üí) (#\^ #\‚Åª) (#\- #\‚Äî) (#\~ #\„Äú)))
    (#\= ((#\/ #\‚â†) (#\/ #\‚â†) (#\~ #\‚âà) (#\> #\‚áí) (#\^ #\‚Åº)))
    (#\_ (;; combining characters
	  (#\^ #\ÃÇ) (#\` #\ÃÄ) (#\' #\ÃÅ) (#\~ #\ÃÉ) (#\- #\ÃÑ) (#\_ #\Ã≤)
	  (#\O #\‚Éù) (#\[ #\‚Éû) (#\< #\‚Éü)
	  ;; misc underscore
	  (#\^ #\¬Ø)))
    (#\< ((#\= #\‚â§) (#\< #\¬´)))
    (#\> ((#\= #\‚â•) (#\> #\¬ª)))
    (#\( ((#\^ #\‚ÅΩ) (#\( #\‚∏®)))
    (#\) ((#\^ #\‚Åæ) (#\) #\‚∏©)))
    (#\: ((#\- #\√∑)))
    (#\. ((#\o #\‚Ä¢) #| (#\. #\¬∑) |# (#\. #\‚Ä¶) (#\- #\‚ãÖ) (#\^ #\Àö)))
    (#\$ ((#\$ #\¬§)))
    (#\% ((#\% #\‚Ä∞))))
  "Unicode compose character lists.")

;; Since this is probably just for me, does it really matter? 
(defun save-unipose-for-emacs (&optional (file "~/src/el/unipose-data.el"))
  "Save the unipose date as loadable ELisp in FILE."
  (with-open-file (stream (glob:expand-tilde file)
			  :direction :output
			  :if-exists :supersede)
    (format stream ";;;~%;;; unipose-data.el~%;;;~%~@
		    ;;; Automatically generated from UNIPOSE at ~a~%~%"
	    (dtime:date-string))
    (print-unipose-for-emacs :stream stream)
    (format stream "~%;; EOF~%")))

(defun print-unipose-for-emacs (&key (tree *unipose*)
				  (stream *standard-output*) (depth 0) (n 0))
  "Print the unipose list for loading into emacs."
  (if (= depth 0)
      (progn
	(format stream "(setq *unipose*~%  '(")
	(loop
	   :for branch :in tree
	   :for n = 0 :then (+ n 1)
	   :do
	   (when (> n 0)
	     (write-string "   " stream))
	   (incf depth)
	   (print-unipose-for-emacs :tree branch :stream stream
				    :depth depth :n n)
	   (terpri stream))
	(format stream "   ))~%"))
      (progn
	(incf depth)
	(typecase tree
	  (null
	   (write-char #\) stream))
	  (list
	   (incf depth)
	   (when (and (> n 0) (> depth 1))
	     (write-char #\space stream))
	   (write-char #\( stream)
	   (loop
	      :for l :in tree
	      :for n = 0 :then (+ n 1)
	      :do
	      (print-unipose-for-emacs :tree l :stream stream
				       :depth depth :n n))
	   (write-char #\) stream))
	  (character
	   (when (> n 0)
	     (write-char #\space stream))
	   (write-char #\? stream)
	   (when (char= tree #\")
	     (write-char #\\ stream))
	   (write-char tree stream))
	  (t
	   (error "Unknown object type in unipose data: ~s ~s~%"
		  (type-of tree) tree))))))

(defun unipose (first-char second-char)
  "Return the character composed from FIRST-CHAR and SECOND-CHAR, or NIL if
there is none defined."
  (let ((level2 (cadr (assoc first-char *unipose*))))
    (or
     (dolist (level3 level2)
       (if (and (listp (car level3)) (position second-char (car level3)))
	   (return (cadr level3))
	   (when (eq (car level3) second-char)
	     (return (cadr level3)))))
     nil)))

;; @@@ This needs testing!! Don't use it yet!
(defun set-unipose (first-char second-char result)
  "Add a character composition to unipose."
  (let ((level2 (cadr (assoc first-char *unipose*))))
    (if (null level2)
	;; If there' not top level first-char, add it
	(setf *unipose* (acons first-char
			       (list (list second-char result)) *unipose*))
	;; Look at sub levels
	(dolist (level3 level2)
	  (if (and (listp (car level3)) (position second-char (car level3)))
	      ;; If multiple second-chars map to the same result
	      (when (not (eq (cadr level3) result))
		;; If the result is not the same, make a new pair
		(setf level3
		      (cons level3 (list (list second-char result)))))
	      ;; If it's a one to one mapping, add
	      (when (eq (car level3) second-char)
		(return (setf (cadr level3) result))))))
    nil))

;; Clean up
#+t-8      (d-remove-feature :t-8)
#+t-16     (d-remove-feature :t-16)
#+t-shrunk (d-remove-feature :t-shrunk)

;; EOF
